//

//uniform sampler2D colorSampler : register(s0);
//uniform sampler2D bump : register(s1);
//uniform sampler2D ShadowMap : register(s2);

DeclTex2D(colorSampler, 0);
DeclTex2D(bump, 1);
DeclTex2D(ShadowMap, 2);

#define LIGHT
#define SPECULAR

//Vertex shader to pixel shader
//
struct PS {
	float4 position     : POSITION;         // position in projection space
	float2 uv0          : TEXCOORD0;        // texture coordinate
	float3 LightDir	: TEXCOORD1;        // texture coordinat;
	float4 shadowCrd: TEXCOORD2;
	float3 ViewDir : TEXCOORD3;
#ifdef ALPAHA_TEST
	//float AlphaRef :  TEXCOORD4;
#endif
#ifdef FOG
	float  fogExponent  : TEXCOORD5;
#endif
	float3  worldNormal  : TEXCOORD6;
};

#define PI_ 3.14159265358979

float roughness_to_phong_power(float roughness){
	return (2.0 / pow(roughness, 4.0)) - 2.0;
}

float phong_normalization(float p){
	return ((p+2)*(p+4)) / (8*PI_*(pow(2, -p/2) + p));
}

float4 psMain(in PS In) : COLOR {

	float4 albedo = tex2D(colorSampler, In.uv0);
	
#ifdef ALPHA_TEST
	if (albedo.a < 0.5f) { discard; }
#endif

#ifdef LIGHT

	float4 shadowCrd = In.shadowCrd;
	shadowCrd.xyz /= shadowCrd.w;
	float shadow = tex2D(ShadowMap, shadowCrd.xy).r;
	float sh = shadow < shadowCrd.z - 0.001f ? 0.0f : 1.0f;
	
	float3 L = normalize(In.LightDir);
	float3 V = normalize(In.ViewDir);
	float3 N = float3(0,0,1);
	
	bool bump_map = true;
	if(bump_map){
		N = normalize(2.0 * tex2D(bump, In.uv0).rgb - 1.0f);
	}
	
	float3 H = normalize(L + V);
	
	float lambert = max(0, dot(L, N));
	
	float roughness = 0.9f;
	float p = roughness_to_phong_power(roughness);
	
	float phong = pow(max(0, dot(N, H)), p) * phong_normalization(p);
	
	float3 light_color = float3(1,1,0.9f) ;
	
	float3 ambient_color = float3(0.2f, 0.2f, 0.27f);
	
	float specular_intensity = 0.1f;
	float3 diffuse = albedo * lambert * light_color;
	float3 specular = phong * light_color * specular_intensity;

	return float4(diffuse + specular + ambient_color * albedo.rgb, 1);
	
#ifdef SPECULAR
#endif
	
#endif

return 0;

}